{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Start API",
            "type": "shell",
            "command": "dotnet run",
            "options": {
                "cwd": "${workspaceFolder}/src/api/"
            },
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "dedicated",
                "showReuseMessage": true,
                "clear": false
            },
            "isBackground": true,
            "problemMatcher": {
                "owner": "dotnet",
                "pattern": [
                    {
                        "regexp": "^(.*)$",
                        "file": 1,
                        "location": 2,
                        "message": 3
                    }
                ],
                "background": {
                    "activeOnStart": true,
                    "beginsPattern": "^.*Building.*$",
                    "endsPattern": "^.*Application started.*$|^.*Now listening on.*$"
                }
            },
            "dependsOn": "Build API"
        },
        {
            "label": "Build API",
            "command": "dotnet",
            "type": "process",
            "args": [
                "build",
                "${workspaceFolder}/src/api/Todo.Api.csproj",
                "/property:GenerateFullPaths=true",
                "/consoleloggerparameters:NoSummary"
            ],
            "group": "build",
            "presentation": {
                "reveal": "silent"
            },
            "problemMatcher": "$msCompile"
        },
        {
            "label": "Start Web",
            "type": "shell",
            "command": "npm run dev",
            "options": {
                "cwd": "${workspaceFolder}/src/web/",
                "env": {
                    "VITE_API_BASE_URL": "http://localhost:3100",
                    "BROWSER": "none"
                }
            },
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "dedicated",
                "showReuseMessage": true,
                "clear": false
            },
            "isBackground": true,
            "problemMatcher": {
                "owner": "vite",
                "pattern": [
                    {
                        "regexp": "^(.*)$",
                        "file": 1,
                        "location": 2,
                        "message": 3
                    }
                ],
                "background": {
                    "activeOnStart": true,
                    "beginsPattern": ".*VITE.*",
                    "endsPattern": ".*ready in.*|.*Local:.*http://localhost.*"
                }
            },
            "dependsOn": "Install Web Dependencies"
        },
        {
            "label": "Install Web Dependencies",
            "type": "shell",
            "command": "npm install",
            "options": {
                "cwd": "${workspaceFolder}/src/web/"
            },
            "group": "build",
            "presentation": {
                "reveal": "silent"
            },
            "problemMatcher": []
        },
        {
            "label": "Start API and Web",
            "dependsOn": [
                "Start API",
                "Start Web"
            ],
            "dependsOrder": "parallel",
            "problemMatcher": []
        },
        {
            "label": "Clean Up Ports",
            "type": "shell",
            "command": "powershell",
            "args": [
                "-Command",
                "$ports = @(3100, 3101, 3102, 5173); foreach ($port in $ports) { try { $connections = netstat -ano | Select-String \":$port \"; if ($connections) { Write-Host \"Cleaning port $port...\"; $connections | ForEach-Object { $line = $_.Line; if ($line -match \"\\s+(\\d+)$\") { $processId = $matches[1]; try { Stop-Process -Id $processId -Force -ErrorAction SilentlyContinue; Write-Host \"Stopped process $processId\" } catch { } } } } } catch { } }; Write-Host \"Port cleanup complete.\""
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared"
            },
            "problemMatcher": []
        }
    ]
}
